LOGICA DE PROGRAMAÇÅO E ORIENTAÇÅO A OBJETOS - ATIVIDADE 28
ALEX ARAUJO - alexhsaraujo@gmail.com


ATIVIDADE PROPOSTA


Escolha e descreva um padrão de projetos.



RESPOSTA


Padrões de projeto (design patterns) são soluções típicas para problemas costumeiros em projeto de software, isto é, são como plantas 
de obra pré que você pode adequar para resolver um problema de projeto recorrente em seu código. Você não pode apenas encontrar
um padrão e copiá-lo para dentro do seu programa, pois o padrão não é um pedaço de código específico, mas um conceito geral para resolver
um problema em particular e onde é possível seguir os detalhes do padrão e implementar uma solução que se adeque às realidades do seu 
próprio programa.


A maioria dos padrões são descritos formalmente para que as pessoas possam reproduzi-los em diferentes contextos. 
Aqui estão alguns elementos que estão geralmente presentes em uma descrição de um padrão:

- Propósito: descreve brevemente o problema e a solução.
- Motivação: explica a fundo o problema e a solução que o padrão torna possível.
- Estruturas de classes: mostram cada parte do padrão e como se relacionam.
- Exemplos de código em uma das linguagens de programação populares tornam mais fácil compreender a ideia por trás do padrão.

Alguns catálogos de padrão listam outros detalhes úteis, tais como a aplicabilidade do padrão, etapas de implementação, 
e relações com outros padrões.

O padrão estrutural escolhido foi o ADAPTER.

Ele é um objeto especial que converte a interface de um objeto para que outro objeto possa entendê-lo. Um adaptador encobre um
dos objetos para esconder a complexidade da conversão acontecendo nos bastidores.O objeto encobrido nem fica ciente do adaptador.
Por exemplo, você pode encobrir um objeto que opera em metros e quilômetros com um adaptador que converte todos os dados para 
unidades imperiais tais como pés e milhas.

Funciona da seguinte maneira: (1) o adaptador obtém uma interface, compatível com um dos objetos existentes; (2) usando essa interface,
o objeto existente pode chamar os métodos do adaptador com segurança; (3) ao receber a chamada, o adaptador passa o pedido para o
segundo objeto, mas em um formato e ordem que o segundo objeto espera.

Um exemplo real disso pode ser encontrado quando você viaja do Brasil para a Europa, visto que o plugue e os padrões de tomadas 
de laptop são diferentes em diferentes países. É por isso que seu plugue do Brasil não vai caber em uma tomada da Alemanha. 
O problema pode ser resolvido usando um adaptador de tomada que tenha o estilo de tomada brasileira e o plugue no estilo europeu.

Adaptador de objeto - essa implementação usa o princípio de composição do objeto: o adaptador implementa a interface de um objeto e
encobre o outro.

Adaptador de classe - essa implementação utiliza herança: o adaptador herda interfaces de ambos os objetos ao mesmo tempo. 

Quanto a aplicabilidade, pode-se utilizar a classe Adaptador quando você quer usar uma classe existente, mas sua interface não 
for compatível com o resto do seu código ou utilizar o padrão quando se quer reutilizar diversas subclasses existentes que não 
possuam alguma funcionalidade comum que não pode ser adicionada a superclasse.

fonte: https://refactoring.guru/pt-br/design-patterns
